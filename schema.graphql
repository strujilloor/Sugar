type Query {
    getBabies: [Baby]!
    getBabyById( id: ID! ): Baby!

    getParents: [Parent]!
    getParentById( id: ID! ): Parent!
}

type Mutation {
    createBaby( data: BabyCreateInput! ): Baby!
    updateBaby( id: ID!, data: BabyUpdateInput! ): Baby!
    deleteBaby( id: ID! ): Baby!

    createParent( data: ParentCreateInput! ): Parent!
    updateParent( id: ID!, data: ParentUpdateInput! ): Parent!
    deleteParent( id: ID! ): Parent!
}

type Baby {
    _id: ID!
    first_name: String!
    last_name: String!
    email: String!
    cellphone: String!
    birth_date: String!
    profile_pic: String!
    score: SCORES
    gender: GENDERS
    liked_by: [Parent]!
    is_active: Boolean!
}

type Parent {
    _id: ID!
    first_name: String!
    last_name: String!
    email: String!
    cellphone: String!
    birth_date: String!
    profile_pic: String!
    gender: GENDERS
    is_active: Boolean!
}

input BabyCreateInput {
    first_name: String!
    last_name: String!
    email: String!
    cellphone: String!
    birth_date: String
    profile_pic: String
    score: SCORES
    gender: GENDERS
    is_active: Boolean
}

input ParentCreateInput {
    first_name: String!
    last_name: String!
    email: String!
    cellphone: String!
    birth_date: String
    profile_pic: String
    gender: GENDERS
    is_active: Boolean
}

input BabyUpdateInput {
    first_name: String
    last_name: String
    email: String
    cellphone: String
    birth_date: String
    profile_pic: String
    score: SCORES
    gender: GENDERS
    is_active: Boolean
}

input ParentUpdateInput {
    first_name: String
    last_name: String
    email: String
    cellphone: String
    birth_date: String
    profile_pic: String
    gender: GENDERS
    is_active: Boolean
}

enum GENDERS{
    M
    F
    O
}

enum SCORES{
    1
    2
    3
    4
    5
}