scalar EmailAdd
scalar Upload
directive @auth on FIELD_DEFINITION | FIELD

type Query {
    getBabies: [Baby]!
    getBabyById( id: ID! ): Baby!
    # getBabyByEmail(email: String!): Baby!

    getParents: [Parent]!
    getParentById( id: ID! ): Parent!
    # getParentByEmail(email: String!: Parent!

    # meBaby: Author! @auth ¿como lo hago si puede retornar un Baby como un Parent? R/ has uno para cada uno
}

type Mutation {
    createBaby( data: BabyCreateInput! ): Baby!
    updateBaby( data: BabyUpdateInput! ): Baby! @auth
    # TODO: add parent to baby's liked_by array
    addParent( idParent: ID! ): String! @auth
    deleteBaby: String! @auth

    createParent( data: ParentCreateInput! ): Parent!
    updateParent( data: ParentUpdateInput! ): Parent! @auth
    addBaby( idBaby: ID! ): String! @auth
    deleteParent: String! @auth


    loginBaby(email:EmailAdd!, password: String!): Auth!
    loginParent(email:EmailAdd!, password: String!): Auth!
}

type Auth {
    token: String!
    message: String!
}

type Baby {
    _id: ID!
    first_name: String!
    last_name: String!
    email: EmailAdd!
    password: String!
    cellphone: String!
    birth_date: String
    profile_pic: String # no tiene que ser obligatoriamente un string
    score: Int
    gender: GENDERS
    liked_by: [Parent]!
    is_active: Boolean!
    description: String # será obligatorio? no por que si no tiene el campo arroja error
}

type Parent {
    _id: ID!
    first_name: String!
    last_name: String!
    email: EmailAdd!
    password: String!
    cellphone: String!
    birth_date: String
    profile_pic: String
    score: Int
    gender: GENDERS
    liked_by: [Baby]!
    is_active: Boolean!
    description: String # será obligatorio?
}

input BabyCreateInput {
    first_name: String!
    last_name: String!
    email: String!
    password: String!
    cellphone: String!
    birth_date: String
    profile_pic: Upload
    score: Int
    gender: GENDERS
    is_active: Boolean
}

input ParentCreateInput {
    first_name: String!
    last_name: String!
    email: String!
    password: String!
    cellphone: String!
    birth_date: String
    profile_pic: Upload
    score: Int
    gender: GENDERS
    is_active: Boolean
}

input BabyUpdateInput {
    first_name: String
    last_name: String
    email: String
    password: String
    cellphone: String
    birth_date: String
    profile_pic: Upload
    score: Int
    gender: GENDERS
    is_active: Boolean
}

input ParentUpdateInput {
    first_name: String
    last_name: String
    email: String
    password: String
    cellphone: String
    birth_date: String
    profile_pic: Upload
    score: Int
    gender: GENDERS
    is_active: Boolean
}

enum GENDERS{
    M
    F
    O
}

enum SCORES{ # como defino que sean números?
    ONE
    TWO
    THREE
    FOUR
    FIVE
}